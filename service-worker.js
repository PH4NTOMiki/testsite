var version="worker_1.0.0",filesToCache=["/offline/","/favicon.ico","/"],coreID=version+"_core",pageID=version+"_pages",imgID=version+"_img",cacheIDs=[coreID,pageID,imgID],trimCache=function(e,n){caches.open(e).then((function(n){n.keys().then((function(t){n.delete(t[0]).then((function(){trimCache(e)}))}))}))};self.addEventListener("install",(function(e){self.skipWaiting(),e.waitUntil(caches.open(coreID).then((function(e){return filesToCache.forEach((function(n){e.add(new Request(n))})),e})))})),self.addEventListener("activate",(function(e){e.waitUntil(caches.keys().then((function(e){return Promise.all(e.filter((function(e){return!cacheIDs.includes(e)})).map((function(e){return caches.delete(e)})))})).then((function(){return self.clients.claim()})))})),self.addEventListener("fetch",(function(e){var n=e.request;"only-if-cached"===e.request.cache&&"same-origin"!==e.request.mode||"GET"===n.method&&(n.headers.get("Accept").includes("text/html")||n.headers.get("Accept").includes("/css")||n.headers.get("Accept").includes("/javascript")||n.url.endsWith("/")||n.url.toLowerCase().split("?")[0].endsWith(".js")||n.url.toLowerCase().split("?")[0].endsWith(".css")?e.respondWith(fetch(n).then((function(t){if("opaque"!==t.type){var c=t.clone(),i=t.clone();e.waitUntil(caches.open(pageID).then((function(e){return e.put(n,c)})).then((function(){const e=new URL(t.url);return location.origin===e.origin&&filesToCache.includes(e.pathname)?caches.open(coreID).then((function(e){let t=e.put(n,i);return console.log(t),t})):Promise.resolve()})))}return t})).catch((function(e){return caches.match(n).then((function(e){return e||(n.headers.get("Accept").includes("/css")||n.headers.get("Accept").includes("/javascript")?new Response("",{status:500,statusText:"offline"}):caches.match("/offline/"))}))}))):n.headers.get("Accept").includes("image")&&e.respondWith(caches.match(n).then((function(t){return t||fetch(n).then((function(t){if(n.headers.get("Accept").includes("image")){var c=t.clone(),i=t.clone();e.waitUntil(caches.open(imgID).then((function(e){return e.put(n,c)})).then((function(){const e=new URL(t.url);return location.origin===e.origin&&filesToCache.includes(e.pathname)?caches.open(coreID).then((function(e){return e.put(n,i)})):Promise.resolve()})))}return t}))}))))})),self.addEventListener("message",(function(e){"cleanUp"===e.data&&(trimCache(pageID),trimCache(imgID))}));